#!/bin/bash

function f_btrfs_installation() {
	
	# UPDATE MIRRORLIST
	#===============================================================================
	echo -e '\nUpdating Mirrorlist\n\nthis could take some time\nPlease do not close the terminal\n'
	reflector --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
	#===============================================================================


	# Install base pacages
	#===============================================================================
	f_pakage_install pakages_base
	f_pakage_install pakages_base_btrfs
	f_pakage_install pakages_base_network
	f_pakage_install pakages_base_video
	f_pakage_install pakages_base_audio
	f_pakage_install pakages_base_desktop
	f_pakage_install pakages_base_cosmetik
	#===============================================================================



	# GO TO NO PASSWORD MODE
	#===============================================================================
	cp -f -v /mnt/etc/sudoers /mnt/etc/sudoers.back
	echo "%wheel ALL=(ALL) NOPASSWD: ALL" >> /mnt/etc/sudoers
	#===============================================================================




	# Generate fstab
	#===============================================================================
	genfstab -U -p /mnt > /mnt/etc/fstab
	#===============================================================================



	# COPY system config FILES
	#===============================================================================
	mv -f -v $working_dir/lib/configs/btrfs/mkinitcpio.conf	/mnt/etc/mkinitcpio.conf
	#===============================================================================



	#GENERATE SYSTEM LOCALE
	#===============================================================================
	f_set_time

	case $LANGUAGE in
		English )
			f_set_english_language ;;
		German )
			f_set_german_language ;;
		Russian )
			f_set_russian_language ;;
	esac

	arch-chroot /mnt /bin/bash -c locale-gen
	#===============================================================================



	# Set hostname
	#===============================================================================
	echo "$HOSTNAME" > /mnt/etc/hostname
	#===============================================================================



	#Set ROOT
	#===============================================================================
	case $ROOTACCOUNT in
		yes )
			f_set_root_pw ;;
		no )
			arch-chroot /mnt /bin/bash -c "passwd -l root" ;;
	esac
	#===============================================================================



	# CREATE NEW USER
	#===============================================================================
	f_create_new_user
	#===============================================================================



	# INSTALL yaourt
	#===============================================================================
	f_install_yaourt
	#===============================================================================



	# Desktop installation
	#===============================================================================
	case $DESKTOP in
		i3 )
			f_install_desktop pakages_i3
			f_install_i3_cosmetics ;;
		
		xfce )
			f_install_desktop pakages_xfce4 ;;
		
		mate )
			f_install_desktop pakages_mate ;;
		
		gnome )
			f_install_desktop pakages_gnome ;;
		
		cinnamon )
			f_install_desktop pakages_cinnamon ;;
		
		"No Desktop" )
			;;
	esac
	#===============================================================================



	# Grafik driver installation
	#===============================================================================
	case $GRAFIKDRIVER in
		Virtualbox )
			pacstrap /mnt virtualbox-guest-dkms virtualbox-guest-utils ;;
		
		Nvidia )
			pacstrap /mnt nvidia-dkms ;;
		
		ATI )
			pacstrap /mnt xf86-video-ati ;;
		
		Intel )
			pacstrap /mnt xf86-video-intel ;;
		
		Nouveau )
			pacstrap /mnt xf86-video-nouveau ;;
		
		"No Video driver" )
			;;
	esac
	#===============================================================================



	# INSTALL YAOURT + COSMETICS
	#===============================================================================
	f_install_yaourt_cosmetiks
	#===============================================================================



	# GO BACK TO  PASSWORD MODE
	#===============================================================================
	mv -f -v /mnt/etc/sudoers.back /mnt/etc/sudoers
	#===============================================================================



	# FIX USER HOME OWNERSHIP
	#===============================================================================
	arch-chroot /mnt /bin/bash -c "chown -R $USERNAME:users /home/$USERNAME"
	arch-chroot /mnt /bin/bash -c "chmod -R 0700 /home/$USERNAME"
	#===============================================================================

	


	# START DAEMONS
	#===============================================================================
	arch-chroot /mnt /bin/bash -c "systemctl enable acpid"
	arch-chroot /mnt /bin/bash -c "systemctl enable ntpd"

	# network managment
	arch-chroot /mnt /bin/bash -c "systemctl enable avahi-daemon"
	arch-chroot /mnt /bin/bash -c "systemctl enable wpa_supplicant"
	arch-chroot /mnt /bin/bash -c "systemctl enable NetworkManager"
	arch-chroot /mnt /bin/bash -c "systemctl enable sshd.socket"

	# NFS utils
	arch-chroot /mnt /bin/bash -c "systemctl enable rpcbind"

	# Cronie
	#arch-chroot /mnt /bin/bash -c "systemctl enable cronie.service"

	# lightdm
	arch-chroot /mnt /bin/bash -c "systemctl enable lightdm.service"
	#===============================================================================
	
	arch-chroot /mnt /bin/bash -c "mkinitcpio -p linux"

	cp -f -v /mnt/boot/vmlinuz-linux					/mnt/boot/vmlinuz-linux-virgina
	cp -f -v /mnt/boot/initramfs-linux.img				/mnt/boot/initramfs-linux-virgina.img
	cp -f -v /mnt/boot/initramfs-linux-fallback.img		/mnt/boot/initramfs-linux-fallback-virgina.img

	arch-chroot /mnt /bin/bash -c "btrfs subvol snapshot / /.snapshots/virgina"


	#GRUB INSTALLATION
	#===============================================================================
	if [[ -d "/sys/firmware/efi/efivars" ]];
		then
			# install grub efi
			arch-chroot /mnt /bin/bash -c "grub-install --efi-directory=/boot/efi --bootloader-id=Arch_$(</mnt/etc/hostname)"
		else
			# install grub legacy
			arch-chroot /mnt /bin/bash -c "grub-install /dev/$(</tmp/hdd_name)"
	fi
	
	arch-chroot /mnt /bin/bash -c "grub-mkconfig -o /boot/grub/grub.cfg"
	#===============================================================================



	## BOOTCTL INSTALLATION
	##===============================================================================
	## get uuid for btrfs partition
	#lsblk -f | grep $(</tmp/hdd_name)3 > /tmp/uuid
	#awk ' { print $3 } ' < /tmp/uuid > /tmp/uuid_2

	#arch-chroot /mnt /bin/bash -c "bootctl install --path=/boot --no-variables"

	#echo "timeout 5"		> /mnt/boot/loader/loader.conf
	#echo "default arch"		>> /mnt/boot/loader/loader.conf

	#echo "title		PrimeArch"											> /mnt/boot/loader/entries/arch.conf
	#echo "linux		/vmlinuz-linux"										>> /mnt/boot/loader/entries/arch.conf
	#echo "initrd	/initramfs-linux.img"								>> /mnt/boot/loader/entries/arch.conf
	#echo "options	root=UUID=$(</tmp/uuid_2) rootflags=subvol=ROOT rw"	>> /mnt/boot/loader/entries/arch.conf

	#echo "title		PrimeArch virgina"											> /mnt/boot/loader/entries/virgina.conf
	#echo "linux		/vmlinuz-linux-virgina"										>> /mnt/boot/loader/entries/virgina.conf
	#echo "initrd	/initramfs-linux-virgina.img"								>> /mnt/boot/loader/entries/virgina.conf
	#echo "options	root=UUID=$(</tmp/uuid_2) rootflags=subvol=.sanpshots/virgina rw"	>> /mnt/boot/loader/entries/virgina.conf

	#efibootmgr -c -d /dev/$(</tmp/hdd_name) -p 1 -l /EFI/systemd/systemd-bootx64.efi -L "PrimeArch"
	##===============================================================================

}
